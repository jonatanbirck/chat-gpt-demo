import com.theokanning.openai.OpenAiService;
import com.theokanning.openai.completion.chat.*;
import com.theokanning.openai.image.CreateImageRequest;
import com.theokanning.openai.image.Image;
import com.theokanning.openai.image.ImageResult;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

@SuppressWarnings("unused")
public class ChatGPTClient {

    private static final String API_KEY = "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";
    private static final OpenAiService service = new OpenAiService(API_KEY);

    private ChatGPTClient() {
        throw new UnsupportedOperationException("utility class");
    }

    /**
     * Create image using DALL·E
     *
     * @param caption the message, one example "An Impressionist oil painting of sunflowers in a purple vase…"
     * @return url from image
     */
    public static String createImage(String caption) {
        CreateImageRequest request = CreateImageRequest.builder()
                .prompt(caption)
                .build();
        ImageResult result = service.createImage(request);
        Image image = result.getData().get(0);
        return image.getUrl();
    }

    /**
     * Send a message to chatGPT
     *
     * @param message to chatGPT
     * @return text generated by chatGPT
     */
    public static String sendMessage(String message) {
        final List<ChatMessage> context = new ArrayList<>(1);
        return sendMessage(context, message);
    }

    /**
     * Send a message to chatGPT with context
     *
     * @param context message history
     * @param message to chatGPT
     * @return text generated by chatGPT
     */
    public static String sendMessage(List<ChatMessage> context, String message) {
        final ChatMessage systemMessage = new ChatMessage(ChatMessageRole.SYSTEM.value(), message);
        context.add(systemMessage);
        ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest
                .builder()
                .model("gpt-3.5-turbo")
                .messages(context)
                .n(1)
                .maxTokens(4000)
                .logitBias(new HashMap<>())
                .build();

        final ChatCompletionResult result = service.createChatCompletion(chatCompletionRequest);
        final List<ChatCompletionChoice> choices = result.getChoices();
        return choices.stream()
                .map(choice -> choice.getMessage().getContent())
                .collect(Collectors.joining(", "));
    }
}